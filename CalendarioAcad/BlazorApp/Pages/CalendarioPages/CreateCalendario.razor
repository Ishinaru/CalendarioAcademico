@page "/Calendario/CreateCalendario"

@inject ICalendarioInterface Service;
@inject NavigationManager NavigationManager;


@if(showSuccessMessage)
{
    <div class="alert alert-success">
        @successMessage
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}

<h2>Criar Calendário</h2>

<EditForm Model="calendario" OnValidSubmit="@HandleSubmit" class="mt-3">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="ano" class="form-label">Ano do calendário</label>
        <InputNumber id="ano" class="form-control" @bind-Value="calendario.Ano" />
    </div>

    <div class="mb-3">
        <label for="observacao" class="form-label">Observação</label>
        <InputText id="observacao" class="form-control" @bind-Value="calendario.Observacao" />
    </div>

    <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
        @(isSubmitting ? "Criando..." : "Criar Calendário")
    </button>
</EditForm>

@code {
    private CriarCalendarioDTO calendario = new();
    private bool isSubmitting = false;
    private bool showSuccessMessage = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    private async Task HandleSubmit()
    {
        isSubmitting = true;
        errorMessage = string.Empty;
        showSuccessMessage = false;

        try
        {
            var response = await Service.CreateCalendario(calendario);
            if(response.Status)
            {
                successMessage = "Calendário criado! Redirecionando...";
                showSuccessMessage = true;
                StateHasChanged();
                await Task.Delay(2000);

                NavigationManager.NavigateTo("/Calendario/ViewCalendario");
            }

            else
            {
                errorMessage = response.Mensagem;
                StateHasChanged();
                await Task.Delay(2000);
                errorMessage = string.Empty;
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            errorMessage = e.Message; 
            StateHasChanged();
            await Task.Delay(2000);
            errorMessage = string.Empty;
            StateHasChanged();
          
        }
        finally
        {
            isSubmitting = false;
        }
    }

    
}
