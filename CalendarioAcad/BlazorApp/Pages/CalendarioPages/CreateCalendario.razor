@page "/Calendario/CreateCalendario"
@inject ICalendarioInterface Service
@inject NavigationManager NavigationManager

<PageTitle>Criar Calendário</PageTitle>

@if (showSuccessMessage)
{
    <div class="alert alert-success mb-4">
        @successMessage
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mb-4">
        @errorMessage
    </div>
}

<h2 class="mb-4">Criar Calendário</h2>

<EditForm Model="calendario" OnValidSubmit="HandleSubmit" class="card p-4 shadow-sm">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger mb-3" />

    <div class="mb-3">
        <label for="ano" class="form-label">Ano do Calendário</label>
        <InputNumber id="ano" class="form-control" @bind-Value="calendario.Ano" />
    </div>

    <div class="mb-4">
        <label for="observacao" class="form-label">Observação</label>
        <InputText id="observacao" class="form-control" @bind-Value="calendario.Observacao" />
    </div>

    <div class="d-flex gap-2">
        <button type="button" class="btn btn-secondary" @onclick="Voltar">
            Voltar
        </button>
        <button type="submit" class="btn" disabled="@isSubmitting" style="background-color: #2196F3; color: white;">
            @(isSubmitting ? "Criando..." : "Criar Calendário")
        </button>
    </div>
</EditForm>

@code {
    private CriarCalendarioDTO calendario = new();
    private bool isSubmitting = false;
    private bool showSuccessMessage = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    private async Task HandleSubmit()
    {
        isSubmitting = true;
        errorMessage = string.Empty;
        showSuccessMessage = false;

        try
        {
            var response = await Service.CreateCalendario(calendario);
            if (response.Status)
            {
                successMessage = "Calendário criado com sucesso! Redirecionando...";
                showSuccessMessage = true;
                await Task.Delay(2000);
                NavigationManager.NavigateTo("/Calendario/ViewCalendario");
            }
            else
            {
                errorMessage = response.Mensagem;
                await Task.Delay(2000);
                errorMessage = string.Empty;
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Ocorreu um erro ao criar o calendário: " + ex.Message;
            await Task.Delay(2000);
            errorMessage = string.Empty;
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void Voltar()
    {
        NavigationManager.NavigateTo("/Calendario/ViewCalendario");
    }
}