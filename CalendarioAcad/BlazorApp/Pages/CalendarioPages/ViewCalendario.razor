@page "/Calendario/ViewCalendario"
@inject ICalendarioInterface CalendarioService
@inject NavigationManager Navigation

<div class="alert-fixed-container"> 
    @if (alertMessage != string.Empty)
    {
        <div class="alert-container">
            <Alert Color="@alertColorMessage" class="d-flex align-items-center">
                <Icon Name="@alertIconMessage" class="me-2" />
                @alertMessage
            </Alert>
        </div>
    }
</div>

<div class="selector-container">
    <div class="header-actions">
        <button class="btn btn-primary" @onclick="ToCreateCalendario">
            <i class="bi bi-plus-lg"></i> Criar Calendário
        </button>
    </div>

    @if (calendarios == null)
    {
        <div class="loading-container">
            <div class="spinner"></div>
            <div>Carregando...</div>
        </div>
    }
    else if (!calendarios.Any())
    {
        <div class="empty-state">
            <i class="bi bi-calendar-event"></i>
            <h3>Nenhum calendário disponível</h3>
        </div>
    }
    else
    {
        <div class="year-selector">
            @foreach (var calendario in calendarios.OrderBy(c => c.Ano))
            {
                <button class="year-button @(selectedYear == calendario.Ano ? "selected" : "")"
                @onclick="() => ToggleYear(calendario.Ano)"
                disabled="@(calendario.Status == Status.Desativado)">
                    @calendario.Ano
                    @if (calendario.Ano == DateTime.Now.Year)
                    {
                        <span class="current-badge">Atual</span>
                    }
                    @if (calendario.Status == Status.Desativado)
                    {
                        <span class="inactive-badge">Desativado</span>
                    }
                </button>
            }
        </div>

        @if (selectedYear.HasValue)
        {
            var calendarioSelecionado = calendarios.FirstOrDefault(c => c.Ano == selectedYear);
            <div class="calendar-section">
                @if(calendarioSelecionado != null)
                {
                    <CalendarioComponent MesAtual="startDate" IdCalendario="@calendarioSelecionado.IdCalendario" OnEventoSelecionado="OnEventoSelecionado" SelectedEventoId="@selectedEventoId" OnAnoMudou="HandleAnoMudou" />
                    <div class="action-buttons">
                        <button class="btn btn-secondary">
                            <i class="bi bi-calendar2-event"></i> Eventos
                        </button>

                        @if (calendarioSelecionado.Status == Status.Aguardando_Aprovação)
                        {
                            <button class="btn btn-primary"
                                    @onclick="() => NavigateToEditEvento(selectedEventoId??0)" disabled="@(selectedEventoId == null)">
                                <i class="bi bi-pencil"></i> Editar Evento
                            </button>
                            <button class="btn btn-primary"
                                    @onclick="() => NavigateToCreateEvento(calendarioSelecionado.IdCalendario)">
                                <i class="bi bi-plus-circle"></i> Criar Evento
                            </button>
                        }
                        else if (calendarioSelecionado.Status == Status.Aprovado)
                        {
                            <button class="btn btn-success"
                                    @onclick="() => NavigateToCreatePortaria(calendarioSelecionado.IdCalendario)">
                                <i class="bi bi-file-earmark-text"></i> Criar Portaria
                            </button>
                        }

                        <ConfirmDialog @ref="cancelDialog" />
                        <Button Color="ButtonColor.Danger" @onclick="()=>ShowConfirmationAsync(calendarioSelecionado.IdCalendario)"><Icon Name="IconName.Ban" />Desativar Calendário</Button>
                    </div>
                }

                <div class="empty-calendar-state">
                    <i class="bi bi-calendar-plus"></i>
                    <h3>Nenhum calendário cadastrado para @selectedYear</h3>
                    <button class="btn btn-primary" @onclick="() => ToCreateCalendario(selectedYear.Value)">
                        Criar Novo Calendário
                    </button>
                </div>
            </div>
        }
    }
</div>

@code {
    private Evento ? eventoCalendario;
    private List<Calendario> ?calendarios;
    private int? selectedYear;
    private DateTime startDate = DateTime.Today;
    private int? selectedEventoId;
    private ConfirmDialog cancelDialog = default!;
    private string alertMessage = string.Empty;
    private AlertColor alertColorMessage = AlertColor.None;
    private IconName alertIconMessage = IconName.None;

    protected override async Task OnInitializedAsync()
    {
        await CarregarCalendarios();
    }

    private async Task CarregarCalendarios()
    {
        calendarios = await CalendarioService.GetAllCalendarios();
        calendarios = calendarios.OrderBy(c => c.Ano).ToList();
        var currentYear = DateTime.Today.Year;
        var calendarioAtivo = calendarios.FirstOrDefault(c => c.Ano == currentYear && c.Status != Status.Desativado);

        selectedYear = calendarioAtivo?.Ano;
        startDate = selectedYear == DateTime.Today.Year ? DateTime.Today : new DateTime(selectedYear ?? DateTime.Today.Year, 1, 1);
    }

    private void ToggleYear(int year)
    {
        if(!calendarios.Any(c=>c.Ano == year)){
            
        }
        if(selectedYear != year){
            selectedYear = selectedYear == year ? null : year;
            startDate = selectedYear == DateTime.Today.Year
                ? DateTime.Today
                : new DateTime(year, 1, 1);
            selectedEventoId = null;
            CarregarEventosParaAno(year);
        }
    }

    private async Task HandleAnoMudou(int novoAno)
    {
        selectedYear = novoAno;
        var calendarioSelecionado = calendarios.FirstOrDefault(c => c.Ano == novoAno);
        if(calendarioSelecionado != null)
        {
            startDate = new DateTime(novoAno, startDate.Month, 1);
            await CarregarEventosParaAno(novoAno);
        }
    }

    private void ToCreateCalendario()
    {
        Navigation.NavigateTo("Calendario/CreateCalendario/");
    }

    private void ToCreateCalendario(int anoCalendario)
    {
        Navigation.NavigateTo($"Calendario/CreateCalendario/{anoCalendario}");
    }

    private async Task ShowConfirmationAsync(int idCalendario)
    {
        var options = new ConfirmDialogOptions
            {
                YesButtonText = "Deletar",
                YesButtonColor = ButtonColor.Danger,
                NoButtonColor = ButtonColor.Secondary,
                NoButtonText = "Cancelar",                
            };
        var confirmation = await cancelDialog.ShowAsync(
            title: "Tem certeza que deseja desativar esse calendário?",
            message1:"Esse processo irá desativar o calendário do sistema.",
            message2:"Tem certeza que irá prosseguir?",
            confirmDialogOptions: options
        );

        if (confirmation)
        {
            await CalendarioService.DesativarCalendario(idCalendario);
            alertColorMessage = AlertColor.Success;
            alertMessage = "Calendário Desativado com sucesso";
            alertIconMessage = IconName.CheckCircleFill;
            StateHasChanged();

            await Task.Delay(3000);
            alertColorMessage = AlertColor.None;
            alertMessage = string.Empty;
            alertIconMessage = IconName.None;

            await CarregarCalendarios();
            StateHasChanged();
        }
    }

    private async Task CarregarEventosParaAno(int ano)
    {
        var calendarioSelecionado = calendarios.FirstOrDefault(c=>c.Ano == ano);
        if(calendarioSelecionado != null)
        {
            calendarioSelecionado.IdCalendario = calendarioSelecionado.IdCalendario;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void NavigateToEditEvento(int idEvento)
    {
        Navigation.NavigateTo($"Eventos/EditarEvento/{idEvento}");
    }

    private void NavigateToCreateEvento(int idCalendario)
    {
        Navigation.NavigateTo($"Eventos/CriarEvento/{idCalendario}");
    }

    private void NavigateToCreatePortaria(int idCalendario)
    {
        Navigation.NavigateTo($"Portaria/CriarPortaria/");
    }

    private void OnEventoSelecionado(int idEvento)
    {
        selectedEventoId = idEvento;
        StateHasChanged();
    }
}

<style>
    .selector-container {
        max-width: 1200px;
        margin: 2rem auto;
        padding: 2rem;
        background: #ffffff;
        border-radius: 16px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    }

    .header-actions {
        margin-bottom: 2rem;
        display: flex;
        justify-content: flex-end;
    }

    .year-selector {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
        gap: 1rem;
        margin-bottom: 2rem;
    }

    .year-button {
        padding: 1rem;
        border: 2px solid #e0e0e0;
        border-radius: 12px;
        background: #f8f9fa;
        color: #2d3436;
        font-weight: 600;
        transition: all 0.3s ease;
        position: relative;
        cursor: pointer;
    }

        .year-button:hover {
            transform: translateY(-2px);
            border-color: #2196f3;
        }

        .year-button.selected {
            background: #2196f3;
            color: white;
            border-color: transparent;
            box-shadow: 0 4px 12px rgba(33, 150, 243, 0.3);
        }

        .year-button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            background: #f5f5f5;
        }

    .current-badge {
        position: absolute;
        top: -8px;
        right: -8px;
        background: #4caf50;
        color: white;
        font-size: 0.75rem;
        padding: 2px 8px;
        border-radius: 12px;
    }

    .inactive-badge {
        position: absolute;
        bottom: -8px;
        left: 50%;
        transform: translateX(-50%);
        background: #757575;
        color: white;
        font-size: 0.7rem;
        padding: 2px 8px;
        border-radius: 12px;
    }

    .calendar-section {
        margin-top: 2rem;
        animation: fadeIn 0.3s ease;
    }

    .action-buttons {
        display: flex;
        gap: 1rem;
        margin-top: 2rem;
        flex-wrap: wrap;
    }

    .btn {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.75rem 1.25rem;
        border-radius: 8px;
        border: none;
        cursor: pointer;
        transition: transform 0.2s, box-shadow 0.2s;
        font-weight: 500;
    }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

    .btn-primary {
        background: #2196F3;
        color: white;
    }

    .btn-secondary {
        background: #6c757d;
        color: white;
    }

    .btn-success {
        background: #4CAF50;
        color: white;
    }

    .btn-danger {
        background: #f44336;
        color: white;
    }

    .loading-container {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 1rem;
        padding: 2rem;
    }

    .spinner {
        width: 24px;
        height: 24px;
        border: 3px solid #f3f3f3;
        border-top: 3px solid #2196f3;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    .empty-state {
        text-align: center;
        padding: 2rem;
        color: #636e72;
    }

        .empty-state i {
            font-size: 3rem;
            margin-bottom: 1rem;
        }

    @@keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@media (max-width: 768px) {
        .selector-container {
            margin: 1rem;
            padding: 1rem;
        }

        .year-selector {
            grid-template-columns: repeat(3, 1fr);
        }

        .action-buttons {
            flex-direction: column;
        }
    }

    .alert-fixed-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 9999;
        min-width: 300px;
        animation: alertSlideIn 0.3s ease-out;
    }

    .global-alert {
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        border-left: 4px solid;
        backdrop-filter: blur(5px);
        transition: all 0.3s ease;
    }

    @@keyframes alertSlideIn {
        from

    {
        opacity: 0;
        transform: translateX(100%);
    }

    to {
        opacity: 1;
        transform: translateX(0);
    }

    }

    /* Estilo específico para sucesso */
    .alert-success {
        border-left-color: #2ecc71 !important;
        background: rgba(46, 204, 113, 0.95) !important;
        color: white !important;
    }
</style>