@page "/Calendario/ViewCalendario"
@using BlazorApp.Models
@using BlazorApp.Services
@using BlazorApp.Services.CalendarioService

@inject ICalendarioInterface Service
@inject NavigationManager NavigationManager

<h1 class="text-center mb-3">Calendários</h1>
<a class="btn btn-primary mb-3" href="/Calendario/CreateCalendario">Criar Calendário</a>
<hr />

@if(!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-warning mt-3">
        @errorMessage
    </div>
}

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success mt-3">
        @successMessage
    </div>
}

@if(calendarios == null)
{
    <p><em>Carregando...</em></p>
}
else
{
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th>Ano</th>
                <th>Observação</th>
                <th>Número Resolução</th>
                <th>Status</th>
                <th>Ações</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var calendario in calendarios)
            {
                <tr>
                    <td>@calendario.Ano</td>
                    <td>@calendario.Observacao</td>
                    <td>@calendario.NumeroResolucao</td>
                    <td>@EnumExtensionsBuild.ConverteEnum(calendario.Status)</td>
                    <td style="white-space:nowrap">
                        <a class="btn btn-primary btn-sm" @onclick="()=>AprovarCalendario(calendario.IdCalendario)"> Aprovar Calendário</a>
                        <a class="btn btn-danger btn-sm" @onclick="()=>DesativarCalendario(calendario.IdCalendario)"> Desativar Calendário</a>
                        <a class="btn btn-outline-info btn-sm" href="Eventos/ViewEventos/@calendario.IdCalendario">Ver Eventos</a>
                    </td>
                </tr>
            }      
        </tbody>
    </table>


}

@code {
    private List<Calendario> ?calendarios;
    private string mensagem = "";
    private string alertColor = "";
    private string alertIcon = "";
    private string ariaLabel = "";
    private string errorMessage = "";
    private string successMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await GetAsync();
    }

    private async Task GetAsync() 
        => calendarios = await Service.GetAllCalendarios();

    private async Task AprovarCalendario(int idCalendario)
    {
        try {
            errorMessage = null;
            successMessage = null;

            var response = await Service.AprovarCalendario(idCalendario);

            if(response.Status)
            {
                successMessage = "Calendário Aprovado com sucesso";
                StateHasChanged();
                await Task.Delay(2000);
                successMessage = null;
                await GetAsync();
            }
            else
            {
                errorMessage = response.Mensagem;
                StateHasChanged();
                await Task.Delay(2000);
                errorMessage = null;
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
            Console.WriteLine($"Erro ao aprovar calendário: {e.Message}");
            StateHasChanged();
            await Task.Delay(2000);
            errorMessage = null;
            StateHasChanged();
        }
    }

    private async Task DesativarCalendario(int idCalendario){
        try
        {
            errorMessage = null;
            successMessage = null;
            var response = await Service.DesativarCalendario(idCalendario);
            if (response.Status)
            {
                successMessage = "Calendário Desativado com sucesso";
                StateHasChanged();
                await Task.Delay(2000);
                successMessage = null;
                await GetAsync();
            }
            else
            {
                errorMessage = response.Mensagem;
                StateHasChanged();
                await Task.Delay(2000);
                errorMessage = null;
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
            Console.WriteLine($"Erro ao desativar calendário: {e.Message}");
            StateHasChanged();
            await Task.Delay(2000);
            errorMessage = null;
            StateHasChanged();
        }
        
    }

}
